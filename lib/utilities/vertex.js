'use strict';

function vertexNamesFromVertices(vertices) {
  var vertexNames = vertices.map(function (vertex) {
    var vertexName = vertex.getName();

    return vertexName;
  });

  return vertexNames;
}

function topologicallyOrderVertices(vertices) {
  ///
  vertices.sort(function (firstVertex, secondVertex) {
    var firstVertexIndex = firstVertex.getIndex(),
        secondVertexIndex = secondVertex.getIndex();

    if (false) {} else if (firstVertexIndex < secondVertexIndex) {
      return -1;
    } else if (firstVertexIndex > secondVertexIndex) {
      return +1;
    }
  });

  var topologicallyOrderedVertices = vertices; ///

  return topologicallyOrderedVertices;
}

module.exports = {
  vertexNamesFromVertices: vertexNamesFromVertices,
  topologicallyOrderVertices: topologicallyOrderVertices
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdmVydGV4LmpzIl0sIm5hbWVzIjpbInZlcnRleE5hbWVzRnJvbVZlcnRpY2VzIiwidmVydGljZXMiLCJ2ZXJ0ZXhOYW1lcyIsIm1hcCIsInZlcnRleCIsInZlcnRleE5hbWUiLCJnZXROYW1lIiwidG9wb2xvZ2ljYWxseU9yZGVyVmVydGljZXMiLCJzb3J0IiwiZmlyc3RWZXJ0ZXgiLCJzZWNvbmRWZXJ0ZXgiLCJmaXJzdFZlcnRleEluZGV4IiwiZ2V0SW5kZXgiLCJzZWNvbmRWZXJ0ZXhJbmRleCIsInRvcG9sb2dpY2FsbHlPcmRlcmVkVmVydGljZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSx1QkFBVCxDQUFpQ0MsUUFBakMsRUFBMkM7QUFDekMsTUFBTUMsY0FBY0QsU0FBU0UsR0FBVCxDQUFhLFVBQVNDLE1BQVQsRUFBaUI7QUFDaEQsUUFBTUMsYUFBYUQsT0FBT0UsT0FBUCxFQUFuQjs7QUFFQSxXQUFPRCxVQUFQO0FBQ0QsR0FKbUIsQ0FBcEI7O0FBTUEsU0FBT0gsV0FBUDtBQUNEOztBQUVELFNBQVNLLDBCQUFULENBQW9DTixRQUFwQyxFQUE4QztBQUFHO0FBQy9DQSxXQUFTTyxJQUFULENBQWMsVUFBU0MsV0FBVCxFQUFzQkMsWUFBdEIsRUFBb0M7QUFDaEQsUUFBTUMsbUJBQW1CRixZQUFZRyxRQUFaLEVBQXpCO0FBQUEsUUFDTUMsb0JBQW9CSCxhQUFhRSxRQUFiLEVBRDFCOztBQUdBLFFBQUksS0FBSixFQUFXLENBRVYsQ0FGRCxNQUVRLElBQUlELG1CQUFtQkUsaUJBQXZCLEVBQTBDO0FBQ2hELGFBQU8sQ0FBQyxDQUFSO0FBQ0QsS0FGTyxNQUVBLElBQUlGLG1CQUFtQkUsaUJBQXZCLEVBQTBDO0FBQ2hELGFBQU8sQ0FBQyxDQUFSO0FBQ0Q7QUFDRixHQVhEOztBQWFBLE1BQU1DLCtCQUErQmIsUUFBckMsQ0FkNEMsQ0FjSTs7QUFFaEQsU0FBT2EsNEJBQVA7QUFDRDs7QUFFREMsT0FBT0MsT0FBUCxHQUFpQjtBQUNmaEIsMkJBQXlCQSx1QkFEVjtBQUVmTyw4QkFBNEJBO0FBRmIsQ0FBakIiLCJmaWxlIjoidmVydGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiB2ZXJ0ZXhOYW1lc0Zyb21WZXJ0aWNlcyh2ZXJ0aWNlcykge1xuICBjb25zdCB2ZXJ0ZXhOYW1lcyA9IHZlcnRpY2VzLm1hcChmdW5jdGlvbih2ZXJ0ZXgpIHtcbiAgICBjb25zdCB2ZXJ0ZXhOYW1lID0gdmVydGV4LmdldE5hbWUoKTtcblxuICAgIHJldHVybiB2ZXJ0ZXhOYW1lO1xuICB9KTtcblxuICByZXR1cm4gdmVydGV4TmFtZXM7XG59XG5cbmZ1bmN0aW9uIHRvcG9sb2dpY2FsbHlPcmRlclZlcnRpY2VzKHZlcnRpY2VzKSB7ICAvLy9cbiAgdmVydGljZXMuc29ydChmdW5jdGlvbihmaXJzdFZlcnRleCwgc2Vjb25kVmVydGV4KSB7XG4gICAgY29uc3QgZmlyc3RWZXJ0ZXhJbmRleCA9IGZpcnN0VmVydGV4LmdldEluZGV4KCksXG4gICAgICAgICAgc2Vjb25kVmVydGV4SW5kZXggPSBzZWNvbmRWZXJ0ZXguZ2V0SW5kZXgoKTtcblxuICAgIGlmIChmYWxzZSkge1xuXG4gICAgfSBlbHNlICBpZiAoZmlyc3RWZXJ0ZXhJbmRleCA8IHNlY29uZFZlcnRleEluZGV4KSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfSBlbHNlICBpZiAoZmlyc3RWZXJ0ZXhJbmRleCA+IHNlY29uZFZlcnRleEluZGV4KSB7XG4gICAgICByZXR1cm4gKzE7XG4gICAgfVxuICB9KTtcblxuICBjb25zdCB0b3BvbG9naWNhbGx5T3JkZXJlZFZlcnRpY2VzID0gdmVydGljZXM7ICAvLy9cblxuICByZXR1cm4gdG9wb2xvZ2ljYWxseU9yZGVyZWRWZXJ0aWNlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHZlcnRleE5hbWVzRnJvbVZlcnRpY2VzOiB2ZXJ0ZXhOYW1lc0Zyb21WZXJ0aWNlcyxcbiAgdG9wb2xvZ2ljYWxseU9yZGVyVmVydGljZXM6IHRvcG9sb2dpY2FsbHlPcmRlclZlcnRpY2VzXG59O1xuIl19